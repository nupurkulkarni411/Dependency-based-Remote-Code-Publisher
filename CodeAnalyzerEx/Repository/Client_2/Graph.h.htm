<!----------------------------------------------------------------------------
Graph.h.htm - Generated HTML file of Project #3
Published 04 April 2017
Nupur Kulkarni, CSE687 - Object Oriented Design, Spring 2017

Note:
- Markup characters in the text part, enclosed in <pre>...</pre> have been 
  replaced with escape sequences, e.g., < becomes &lt; and > becomes &gt;
----------------------------------------------------------------------------->
<html>
<head>
<link rel = stylesheet href = CSSFile.css>
<script src= JSFile.js></script>
</head>
<body>
<h3>Graph.h</h3>
<hr />
<div class=indent><h4>Dependencies:</h4><p><a href = SemiExp.cpp.htm> SemiExp.cpp</a></p><p><a href = Logger.cpp.htm> Logger.cpp</a></p><p><a href = Logger.h.htm> Logger.h</a></p><p><a href = MockChannel.cpp.htm> MockChannel.cpp</a></p></div>
<hr />
<pre>
 #ifndef GRAPH_H 
 #define GRAPH_H 
 /////////////////////////////////////////////////////////////// 
 // Graph.h - Graph Library                                   // 
 // Ver 1.6                                                   // 
 // Language:    Visual C++ 2012                              // 
 // Platform:    Lenova ThinkPad E420s, Windows 7             // 
 // Application: Type-based Dependency Analysis,              // 
 //              CSE687 - Object Oriented Design              // 
 // Author:      Nupur Kulkarni, Syracuse University,         // 
 //              nvkulkar@syr.edu                             // 
 // Source:      Jim Fawcett, CST 4-187, Syracuse University  // 
 //              (315) 443-3948, jfawcett@twcny.rr.com        // 
 /////////////////////////////////////////////////////////////// 
 /* 
    Package Operations: 
    =================== 
    A graph is a collection of vertices, connected by edges.  Each 
    vertex holds some kind of information held in an instance of 
    a type V and an integer id, which should be unique with a given 
    graph.  Each edge connects a parent vertex with a child 
    vertex and it too holds information in an instance of a type E. 
  
    This package provides two classes that support creation of 
    instances of a graph: Vertex&lt;V,E&gt; and Graph&lt;V,E&gt;.  These are 
    template-based with parameters V and E, as described above. 
  
    The graph holds an aggregated collection of vertices.  Each  
    vertex may hold one or more edges.  The edge is implemented 
    as an instance of std::pair&lt;int,E&gt; where the first parameter 
    is the id of the child vertex and the second parameter is 
    an instance of the edge information type E. 
  
    Note: 
    It is important that vertex ids be unique.  If you set any of 
    them with the second argument of the Vertex constructor or with 
    the id() function it is up to you to ensure uniqueness.  If you 
    don't explicitly set any ids then the constructor insures that 
    vertices get sequential ids in the order constructed. 
  
    Maintanence Information: 
    ======================== 
    Required files: 
    --------------- 
      Graph.h, Graph.cpp,  
      XmlReader.h, XmlReader.cpp,  
      XmlWriter.h, XmlWriter.cpp 
  
    Build Process: 
    -------------- 
    Using Visual Studio Command Prompt: 
      devenv Graph.sln /rebuild debug 
  
    Revision History: 
    ----------------- 
    ver 1.6 : 23 Feb 17 
    - added inlines to to helper functions at the end of this file 
    ver 1.5 : 16 Feb 13 
    - now supports dfs with both function pointers and functors 
    ver 1.4 : 11 Feb 13 
    - removed indent function, now part of XmlWriter,  
      replaced ctor with default param with two ctors, 
      one supplies sequential ids, the other accepts user defined id 
    ver 1.3 : 28 Jan 13  
    - added GraphToXmlString and GraphFromXmlString functions 
    ver 1.2 : 25 Jan 13 
    - changed id() return to reference so can be changed 
    ver 1.1 : 21 Jan 13 
    - added prologue comments, compile test directive 
    ver 1.0 : 14 Jan 13 
    - first release 
  
  */ 
 /* 
  * To Do: 
  * - move GraphToXml and GraphFromXml to separate package 
  * - Strong Components, Topological Sorting 
  * - Find disconnected graph partitions 
  */ 
  
 #include &lt;vector&gt; 
 #include &lt;unordered_map&gt; 
 #include &lt;string&gt; 
 #include "XmlWriter.h" 
 #include "XmlReader.h" 
 #include &lt;iostream&gt; 
 #include &lt;sstream&gt; 
  
 namespace CodeAnalysis 
 {<button onClick = "OnClickDiv('div1', 'button1')" id = "button1">-</button><div id = "div1"> 
   /////////////////////////////////////////////////////////////// 
   // Vertex class 
  
   template&lt;typename V, typename E&gt;  
   class Vertex 
   {<button onClick = "OnClickDiv('div2', 'button2')" id = "button2">-</button><div id = "div2"> 
   public: 
     typedef std::pair&lt;int, E&gt; Edge;  // graph index of target vertex, edge type 
     typename typedef std::vector&lt;Edge&gt;::iterator iterator; 
     iterator begin(); 
     iterator end(); 
     Vertex(V v, size_t id); 
     Vertex(V v); 
     void add(Edge& edge); 
     // Vertex(const Vertex&lt;V,E&gt;& v);                  compiler generated is correct 
     // Vertex&lt;V,E&gt;& operator=(const Vertex&lt;V,E&gt;& v);  compiler generated is correct 
     Edge& operator[](size_t i); 
     Edge operator[](size_t i) const; 
     V& value(); 
     size_t& id();  
     size_t size(); 
     bool& mark(); 
 &nbsp;&nbsp;&nbsp;&nbsp; 
   private: 
     std::vector&lt;Edge&gt; _edges; 
     V _v; 
     size_t _id; 
     static size_t count; 
     bool _mark; 
   }; 
</div><br>   //----&lt; reserve memory for, and initialize, static count &gt;----- 
   template&lt;typename V, typename E&gt; 
   size_t Vertex&lt;V,E&gt;::count = 0; 
  
   //----&lt; set and return boolean mark, used for traversal &gt;------ 
   template&lt;typename V, typename E&gt; 
   bool& Vertex&lt;V,E&gt;::mark() { return _mark; } 
  
   //----&lt; return iterator pointing to first edge &gt;--------------- 
   template&lt;typename V, typename E&gt; 
   typename Vertex&lt;V,E&gt;::iterator Vertex&lt;V,E&gt;::begin() { return _edges.begin(); } 
  
   //----&lt; return iterator pointing to one past last edge &gt;------- 
   template&lt;typename V, typename E&gt; 
   typename Vertex&lt;V,E&gt;::iterator Vertex&lt;V,E&gt;::end() { return _edges.end(); } 
  
   //----&lt; construct instance, specifying id - must be unique &gt;--- 
   template&lt;typename V, typename E&gt; 
   Vertex&lt;V,E&gt;::Vertex(V v, size_t id) : _v(v), _id(id), _mark(false) {} 
  
   //----&lt; construct instance - creates id sequentially &gt;------- 
   template&lt;typename V, typename E&gt; 
   Vertex&lt;V,E&gt;::Vertex(V v) : _v(v), _id(count++), _mark(false) {} 
  
   //----&lt; add edge to vertex edge collection &gt;------------------- 
   template&lt;typename V, typename E&gt; 
   void Vertex&lt;V,E&gt;::add(Edge& edge) { _edges.push_back(edge); } 
  
   //----&lt; index non-const vertex's edges &gt;----------------------- 
   template&lt;typename V, typename E&gt; 
   typename Vertex&lt;V,E&gt;::Edge& Vertex&lt;V,E&gt;::operator[](size_t i) { return _edges[i]; } 
    
   //----&lt; index const vertex's edges &gt;--------------------------- 
   template&lt;typename V, typename E&gt; 
   typename Vertex&lt;V,E&gt;::Edge Vertex&lt;V,E&gt;::operator[](size_t i) const { return _edges[i]; } 
    
   //----&lt; set and read value of vertex's held type, V &gt;---------- 
   template&lt;typename V, typename E&gt; 
   V& Vertex&lt;V,E&gt;::value() { return _v; } 
    
   //----&lt; return vertex's id &gt;----------------------------------- 
   template&lt;typename V, typename E&gt; 
   size_t& Vertex&lt;V,E&gt;::id() { return _id; } 
    
   //----&lt; return number of edges &gt;------------------------------- 
   template&lt;typename V, typename E&gt; 
   size_t Vertex&lt;V,E&gt;::size() { return _edges.size(); } 
  
   /////////////////////////////////////////////////////////////// 
   // Graph class 
  
   template&lt;typename V, typename E&gt; 
   class Graph 
<div id = "div3">   { 
   public: 
     typename typedef std::vector&lt; Vertex&lt;V,E&gt; &gt;::iterator iterator; 
     iterator begin(); 
     iterator end(); 
     // Graph(const Graph&lt;V,E&gt;& g);                  compiler generated is correct 
     // Graph&lt;V,E&gt;& operator=(const Graph&lt;V,E&gt;& g);  compiler generated is correct 
     Vertex&lt;V,E&gt;& operator[](size_t i); 
     Vertex&lt;V,E&gt; operator[](size_t i) const; 
     bool addVertex(Vertex&lt;V,E&gt; v); 
     bool addEdge(E eval, Vertex&lt;V,E&gt;& parent, Vertex&lt;V,E&gt;& child); 
     size_t findVertexIndexById(size_t id); 
     size_t size(); 
     template&lt;typename F&gt; 
     void dfs(Vertex&lt;V,E&gt;& v, F f); 
   private: 
     std::vector&lt; Vertex&lt;V,E&gt; &gt; adj; 
     std::unordered_map&lt;size_t, size_t&gt; idMap; // id maps to graph index 
     template&lt;typename F&gt; 
     void dfsCore(Vertex&lt;V,E&gt;& v, F f); 
   }; 
</div><br>   //----&lt; return iterator pointing to first vertex &gt;------------- 
   template&lt;typename V, typename E&gt; 
   typename Graph&lt;V,E&gt;::iterator Graph&lt;V,E&gt;::begin() { return adj.begin(); } 
  
   //----&lt; return iterator pointing one past last vertex &gt;-------- 
   template&lt;typename V, typename E&gt; 
   typename Graph&lt;V,E&gt;::iterator Graph&lt;V,E&gt;::end() { return adj.end(); } 
    
   //----&lt; index non-const graph's vertex collection &gt;------------ 
   template&lt;typename V, typename E&gt; 
   typename Vertex&lt;V,E&gt;& Graph&lt;V,E&gt;::operator[](size_t i) { return adj[i]; } 
   
   //----&lt; index const graph's vertex collection &gt;---------------- 
   template&lt;typename V, typename E&gt; 
   typename Vertex&lt;V,E&gt; Graph&lt;V,E&gt;::operator[](size_t i) const { return adj[i]; } 
    
   //----&lt; add vertex to graph's vertex collection &gt;-------------- 
   template&lt;typename V, typename E&gt; 
   inline bool Graph&lt;V,E&gt;::addVertex(Vertex&lt;V,E&gt; v)  
   {<button onClick = "OnClickDiv('div4', 'button4')" id = "button4">-</button><div id = "div4">  
 &nbsp;&nbsp;&nbsp;&nbsp;  /* check if the vertex is already in the adjaceny list before adding to 
 &nbsp;&nbsp;&nbsp;&nbsp;  avoid duplicates */ 
 &nbsp;&nbsp;&nbsp;&nbsp;  for (size_t i = 0; i &lt; adj.size(); i++) 
<div id = "div5"> &nbsp;&nbsp;&nbsp;&nbsp;  { 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Vertex&lt;V, E&gt; temp = adj[i]; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  if (temp.value() == v.value()) 
<div id = "div6"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  { 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  return false; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  } 
</div><br> &nbsp;&nbsp;&nbsp;&nbsp;  } 
</div><br> &nbsp;&nbsp;&nbsp;&nbsp;  adj.push_back(v); 
 &nbsp;&nbsp;&nbsp;&nbsp;  idMap[v.id()] = adj.size() - 1; 
 &nbsp;&nbsp;&nbsp;&nbsp;  return true; 
   } 
</div><br>   //----&lt; return number of vertices in graph's collection &gt;------ 
   template&lt;typename V, typename E&gt; 
   size_t Graph&lt;V,E&gt;::size() { return adj.size(); } 
  
   //----&lt; return index of vertex with specified id &gt;------------- 
   template&lt;typename V, typename E&gt; 
   size_t Graph&lt;V,E&gt;::findVertexIndexById(size_t id) 
   {<button onClick = "OnClickDiv('div7', 'button7')" id = "button7">-</button><div id = "div7"> 
     return idMap[id]; 
   } 
</div><br>   //----&lt; add edge from specified parent to child vertices &gt;----- 
   template&lt;typename V, typename E&gt; 
   bool Graph&lt;V,E&gt;::addEdge(E eVal, Vertex&lt;V,E&gt;& parent, Vertex&lt;V,E&gt;& child) 
   {<button onClick = "OnClickDiv('div8', 'button8')" id = "button8">-</button><div id = "div8"> 
 &nbsp;&nbsp;&nbsp;&nbsp;  size_t childIndex = findVertexIndexById(child.id()); 
 &nbsp;&nbsp;&nbsp;&nbsp;  if (childIndex == adj.size()) 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  throw std::exception("no edge child"); 
 &nbsp;&nbsp;&nbsp;&nbsp;  size_t parentIndex = findVertexIndexById(parent.id()); 
 &nbsp;&nbsp;&nbsp;&nbsp;  if (parentIndex == adj.size()) 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  throw std::exception("no edge parent"); 
 &nbsp;&nbsp;&nbsp;&nbsp;  Vertex&lt;V, E&gt;::Edge e; 
 &nbsp;&nbsp;&nbsp;&nbsp;  e.first = (int)childIndex; 
 &nbsp;&nbsp;&nbsp;&nbsp;  e.second = eVal; 
 &nbsp;&nbsp;&nbsp;&nbsp;  /* Check if the edge already exists to avoid duplicate addition */ 
 &nbsp;&nbsp;&nbsp;&nbsp;  for (size_t i = 0; i &lt; adj[parentIndex].size(); i++) 
<div id = "div9"> &nbsp;&nbsp;&nbsp;&nbsp;  { 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Vertex&lt;V, E&gt;::Edge e1 = adj[parentIndex][i]; 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  if (e1.first == e.first) return false; 
 &nbsp;&nbsp;&nbsp;&nbsp;  } 
</div><br> &nbsp;&nbsp;&nbsp;&nbsp;  adj[parentIndex].add(e); 
 &nbsp;&nbsp;&nbsp;&nbsp;  return true; 
   } 
</div><br>   //----&lt; recursive depth first search with action f &gt;----------- 
   template&lt;typename V, typename E&gt; 
   template&lt;typename F&gt; 
   void Graph&lt;V,E&gt;::dfsCore(Vertex&lt;V,E&gt;& v, F f) 
   {<button onClick = "OnClickDiv('div10', 'button10')" id = "button10">-</button><div id = "div10"> 
     f(v); 
     v.mark() = true; 
     for(auto edge : v) 
<div id = "div11">     { 
       if(adj[edge.first].mark() == false) 
         dfsCore(adj[edge.first], f); 
     } 
</div><br>     for(auto& vert : adj) 
<div id = "div12">     { 
       if(vert.mark() == false) 
         dfsCore(vert, f); 
     } 
</div><br>   } 
</div><br>   //----&lt; depth first search, clears marks for next search &gt;----- 
   template&lt;typename V, typename E&gt; 
   template&lt;typename F&gt; 
   void Graph&lt;V,E&gt;::dfs(Vertex&lt;V,E&gt;& v, F f) 
   {<button onClick = "OnClickDiv('div13', 'button13')" id = "button13">-</button><div id = "div13"> 
     dfsCore(v, f); 
     for(auto& vert : adj) 
       vert.mark() = false; 
   } 
</div><br>  
   /////////////////////////////////////////////////////////////// 
   // Display class 
  
   template&lt;typename V, typename E&gt; 
   class Display 
<div id = "div14">   { 
   public: 
     typedef Graph&lt;V,E&gt; graph; 
     typedef Vertex&lt;V,E&gt; vertex; 
     typedef std::pair&lt;int,E&gt; edge; 
  
     static std::vector&lt; Vertex&lt;V,E&gt; &gt; vertsWithNoParents(graph& g) 
     {<button onClick = "OnClickDiv('div15', 'button15')" id = "button15">-</button><div id = "div15"> 
       std::vector&lt;size_t&gt; parentCount; 
       graph::iterator iter = g.begin(); 
       while(iter != g.end()) 
<div id = "div16">       { 
         parentCount.push_back(0); 
         ++iter; 
       } 
</div><br>       iter = g.begin(); 
       while(iter != g.end()) 
<div id = "div17">       { 
         vertex v = *iter; 
         for(size_t i=0; i&lt;v.size(); ++i) 
<div id = "div18">         { 
           edge e = v[i]; 
           parentCount[e.first]++; 
         } 
</div><br>         ++iter; 
       } 
</div><br>       std::vector&lt;vertex&gt; noParents; 
       for(size_t j=0; j&lt;g.size(); ++j) 
         if(parentCount[j] == 0) 
           noParents.push_back(g[j]); 
       return noParents; 
     } 
</div><br>  
     static void show(graph& g) 
     {<button onClick = "OnClickDiv('div19', 'button19')" id = "button19">-</button><div id = "div19"> 
       graph::iterator iter = g.begin(); 
       while(iter != g.end()) 
<div id = "div20">       { 
         vertex v = *iter; 
         std::cout << "\n  vertex id = " << v.id() << ", value = " << (v.value()).c_str(); 
         for(size_t i=0; i&lt;v.size(); ++i) 
<div id = "div21">         { 
           vertex::Edge edge = v[i]; 
           std::cout << "\n    edge points to vertex with id = " << g[edge.first].id(); 
           std::cout << " and value = " << g[edge.first].value().c_str(); 
           std::cout << ", edge value = " << (edge.second).c_str(); 
         } 
</div><br>         ++iter; 
       } 
</div><br>     } 
</div><br>   }; 
</div><br>   //----&lt; convert integer to string &gt;-------------------------- 
   inline std::string ToString(int i) 
   {<button onClick = "OnClickDiv('div22', 'button22')" id = "button22">-</button><div id = "div22"> 
     std::ostringstream in; 
     in << i; 
     return in.str(); 
   } 
</div><br>   //----&lt; convert string to integer &gt;-------------------------- 
   inline int ToInt(const std::string& str) 
   {<button onClick = "OnClickDiv('div23', 'button23')" id = "button23">-</button><div id = "div23"> 
     std::istringstream in(str); 
     int retn; 
     in >> retn; 
     return retn; 
   } 
</div><br>   //----&lt; construct graph from XML string &gt;-------------------- 
   template&lt;typename V, typename E&gt; 
   void GraphFromXmlString(Graph&lt;V,E&gt;& gr, const std::string& Xml) 
   {<button onClick = "OnClickDiv('div24', 'button24')" id = "button24">-</button><div id = "div24"> 
     // add vertices 
     XmlReader vrdr(Xml); 
<div id = "div25">     while(vrdr.next()){ 
<div id = "div26">       if(vrdr.tag() == "vertex"){ 
         XmlReader::attribElems elems = vrdr.attributes(); 
<div id = "div27">         if(elems.size() &gt; 1){ 
           Vertex&lt;V,E&gt; vert(elems[1].second); 
           vert.id() = ToInt(elems[0].second); 
           gr.addVertex(vert); 
         } 
</div><br><div id = "div28">         else{ 
           throw std::exception("ill-formed graph XML"); 
         } 
</div><br>       } 
</div><br>     } 
</div><br>     // add edges 
     //XmlReader erdr(Xml); 
     //int parentId; 
<div id = "div29">     /*while(erdr.next()){ 
<div id = "div30">       if(erdr.tag() == "vertex"){ 
         XmlReader::attribElems elems = erdr.attributes(); 
<div id = "div31">         if(elems.size() &gt; 0){ 
           parentId = ToInt(elems[0].second); 
         } 
</div><br><div id = "div32">         else{ 
           throw std::exception("ill-formed graph XML"); 
         } 
</div><br>       } 
</div><br><div id = "div33">       if(erdr.tag() == "edge"){ 
         XmlReader::attribElems eelems = erdr.attributes(); 
<div id = "div34">         if(eelems.size() &gt; 1){ 
           int childId = ToInt(eelems[0].second); 
           E eval = eelems[1].second; 
           int parentIndex = gr.findVertexIndexById(parentId); 
           Vertex&lt;V,E&gt; parent = gr[parentIndex]; 
           int childIndex = gr.findVertexIndexById(childId); 
           Vertex&lt;V,E&gt; child = gr[childIndex]; 
           gr.addEdge(eval, parent, child); 
         } 
</div><br><div id = "div35">         else{ 
           throw std::exception("ill-formed graph XML"); 
         } 
</div><br>       } 
</div><br>     }*/ 
</div><br>   } 
</div><br>   //----&lt; serialize graph to XML string &gt;---------------------- 
   template&lt;typename V, typename E&gt; 
   std::string GraphToXmlString(Graph&lt;V,E&gt;& gr) 
   {<button onClick = "OnClickDiv('div36', 'button36')" id = "button36">-</button><div id = "div36"> 
     XmlWriter wrg; 
     wrg.indent(); 
     wrg.start("graph"); 
     for(auto vert : gr) 
<div id = "div37">     { 
       wrg.start("vertex"); 
       wrg.addAttribute("id", ToString(vert.id())); 
       wrg.addAttribute("value", vert.value()); 
       for(auto edge : vert) 
<div id = "div38">       { 
         wrg.start("edge"); 
         wrg.addAttribute("targetId", ToString(gr[edge.first].id())); 
         wrg.addAttribute("value", edge.second); 
         wrg.end(); 
       } 
</div><br>       wrg.end(); 
     } 
</div><br>     wrg.end(); 
     return wrg.xml(); 
   } 
</div><br> } 
</div><br> #endif 
  

</pre>
</body>
</html>